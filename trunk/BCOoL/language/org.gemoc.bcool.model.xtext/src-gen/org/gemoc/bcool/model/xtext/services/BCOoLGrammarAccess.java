/*
* generated by Xtext
*/
package org.gemoc.bcool.model.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BCOoLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BCoolSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cImportsLibAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsLibImportLibRuleParserRuleCall_1_0 = (RuleCall)cImportsLibAssignment_1.eContents().get(0);
		private final Assignment cImportsBehavioralInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsBehavioralInterfaceImportInterfaceRuleParserRuleCall_2_0 = (RuleCall)cImportsBehavioralInterfaceAssignment_2.eContents().get(0);
		private final Assignment cBcoolOperatorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBcoolOperatorsBCoolOperatorSpecParserRuleCall_3_0 = (RuleCall)cBcoolOperatorsAssignment_3.eContents().get(0);
		
		//BCoolSpec returns BCoolSpecification:
		//	name=ID? importsLib+=ImportLibRule+ importsBehavioralInterface+=ImportInterfaceRule+
		//	bcoolOperators+=BCoolOperatorSpec+;
		public ParserRule getRule() { return rule; }

		//name=ID? importsLib+=ImportLibRule+ importsBehavioralInterface+=ImportInterfaceRule+ bcoolOperators+=BCoolOperatorSpec+
		public Group getGroup() { return cGroup; }

		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//importsLib+=ImportLibRule+
		public Assignment getImportsLibAssignment_1() { return cImportsLibAssignment_1; }

		//ImportLibRule
		public RuleCall getImportsLibImportLibRuleParserRuleCall_1_0() { return cImportsLibImportLibRuleParserRuleCall_1_0; }

		//importsBehavioralInterface+=ImportInterfaceRule+
		public Assignment getImportsBehavioralInterfaceAssignment_2() { return cImportsBehavioralInterfaceAssignment_2; }

		//ImportInterfaceRule
		public RuleCall getImportsBehavioralInterfaceImportInterfaceRuleParserRuleCall_2_0() { return cImportsBehavioralInterfaceImportInterfaceRuleParserRuleCall_2_0; }

		//bcoolOperators+=BCoolOperatorSpec+
		public Assignment getBcoolOperatorsAssignment_3() { return cBcoolOperatorsAssignment_3; }

		//BCoolOperatorSpec
		public RuleCall getBcoolOperatorsBCoolOperatorSpecParserRuleCall_3_0() { return cBcoolOperatorsBCoolOperatorSpecParserRuleCall_3_0; }
	}

	public class BCoolOperatorSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolOperatorSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGlobalEventExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlobalEventExpressionsGlobalEventExpressionRuleParserRuleCall_2_0 = (RuleCall)cGlobalEventExpressionsAssignment_2.eContents().get(0);
		private final Assignment cGlobalDSEsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGlobalDSEsGlobalDSEsRuleParserRuleCall_3_0 = (RuleCall)cGlobalDSEsAssignment_3.eContents().get(0);
		private final Assignment cBcoolCompositionRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBcoolCompositionRulesBCoolCompositionRuleParserRuleCall_4_0 = (RuleCall)cBcoolCompositionRulesAssignment_4.eContents().get(0);
		private final Keyword cEndOperatorKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BCoolOperatorSpec returns BCoolOperator:
		//	"Operator" name=ID globalEventExpressions+=globalEventExpressionRule? globalDSEs+=globalDSEsRule?
		//	bcoolCompositionRules+=BCoolCompositionRule+ "end operator;";
		public ParserRule getRule() { return rule; }

		//"Operator" name=ID globalEventExpressions+=globalEventExpressionRule? globalDSEs+=globalDSEsRule?
		//bcoolCompositionRules+=BCoolCompositionRule+ "end operator;"
		public Group getGroup() { return cGroup; }

		//"Operator"
		public Keyword getOperatorKeyword_0() { return cOperatorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//globalEventExpressions+=globalEventExpressionRule?
		public Assignment getGlobalEventExpressionsAssignment_2() { return cGlobalEventExpressionsAssignment_2; }

		//globalEventExpressionRule
		public RuleCall getGlobalEventExpressionsGlobalEventExpressionRuleParserRuleCall_2_0() { return cGlobalEventExpressionsGlobalEventExpressionRuleParserRuleCall_2_0; }

		//globalDSEs+=globalDSEsRule?
		public Assignment getGlobalDSEsAssignment_3() { return cGlobalDSEsAssignment_3; }

		//globalDSEsRule
		public RuleCall getGlobalDSEsGlobalDSEsRuleParserRuleCall_3_0() { return cGlobalDSEsGlobalDSEsRuleParserRuleCall_3_0; }

		//bcoolCompositionRules+=BCoolCompositionRule+
		public Assignment getBcoolCompositionRulesAssignment_4() { return cBcoolCompositionRulesAssignment_4; }

		//BCoolCompositionRule
		public RuleCall getBcoolCompositionRulesBCoolCompositionRuleParserRuleCall_4_0() { return cBcoolCompositionRulesBCoolCompositionRuleParserRuleCall_4_0; }

		//"end operator;"
		public Keyword getEndOperatorKeyword_5() { return cEndOperatorKeyword_5; }
	}

	public class GlobalDSEsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "globalDSEsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//globalDSEsRule returns DefPropertyCS:
		//	"Event" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"Event" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class GlobalEventExpressionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "globalEventExpressionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEventExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//globalEventExpressionRule returns EventExpression:
		//	"let" EventExpression;
		public ParserRule getRule() { return rule; }

		//"let" EventExpression
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//EventExpression
		public RuleCall getEventExpressionParserRuleCall_1() { return cEventExpressionParserRuleCall_1; }
	}

	public class BCoolCompositionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolCompositionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositionRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDSEsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cDSEsDefPropertyCSCrossReference_3_0_0 = (CrossReference)cDSEsAssignment_3_0.eContents().get(0);
		private final RuleCall cDSEsDefPropertyCSQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cDSEsDefPropertyCSCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDSEsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cDSEsDefPropertyCSCrossReference_3_1_1_0 = (CrossReference)cDSEsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cDSEsDefPropertyCSIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cDSEsDefPropertyCSCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cMatchingRuleKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMatchingRuleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMatchingRuleMatchingRuleParserRuleCall_6_0 = (RuleCall)cMatchingRuleAssignment_6.eContents().get(0);
		private final Keyword cCoordinationRuleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCoordinationRuleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCoordinationRuleCoordinationRuleParserRuleCall_8_0 = (RuleCall)cCoordinationRuleAssignment_8.eContents().get(0);
		private final Keyword cEndRuleKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BCoolCompositionRule:
		//	"CompositionRule" name=ID "(" (DSEs+=[DefPropertyCS|QualifiedName] ("," DSEs+=[DefPropertyCS])*)? ")" "MatchingRule :"
		//	matchingRule=MatchingRule "CoordinationRule  :" coordinationRule=CoordinationRule "end rule;";
		public ParserRule getRule() { return rule; }

		//"CompositionRule" name=ID "(" (DSEs+=[DefPropertyCS|QualifiedName] ("," DSEs+=[DefPropertyCS])*)? ")" "MatchingRule :"
		//matchingRule=MatchingRule "CoordinationRule  :" coordinationRule=CoordinationRule "end rule;"
		public Group getGroup() { return cGroup; }

		//"CompositionRule"
		public Keyword getCompositionRuleKeyword_0() { return cCompositionRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(DSEs+=[DefPropertyCS|QualifiedName] ("," DSEs+=[DefPropertyCS])*)?
		public Group getGroup_3() { return cGroup_3; }

		//DSEs+=[DefPropertyCS|QualifiedName]
		public Assignment getDSEsAssignment_3_0() { return cDSEsAssignment_3_0; }

		//[DefPropertyCS|QualifiedName]
		public CrossReference getDSEsDefPropertyCSCrossReference_3_0_0() { return cDSEsDefPropertyCSCrossReference_3_0_0; }

		//QualifiedName
		public RuleCall getDSEsDefPropertyCSQualifiedNameParserRuleCall_3_0_0_1() { return cDSEsDefPropertyCSQualifiedNameParserRuleCall_3_0_0_1; }

		//("," DSEs+=[DefPropertyCS])*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//DSEs+=[DefPropertyCS]
		public Assignment getDSEsAssignment_3_1_1() { return cDSEsAssignment_3_1_1; }

		//[DefPropertyCS]
		public CrossReference getDSEsDefPropertyCSCrossReference_3_1_1_0() { return cDSEsDefPropertyCSCrossReference_3_1_1_0; }

		//ID
		public RuleCall getDSEsDefPropertyCSIDTerminalRuleCall_3_1_1_0_1() { return cDSEsDefPropertyCSIDTerminalRuleCall_3_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"MatchingRule :"
		public Keyword getMatchingRuleKeyword_5() { return cMatchingRuleKeyword_5; }

		//matchingRule=MatchingRule
		public Assignment getMatchingRuleAssignment_6() { return cMatchingRuleAssignment_6; }

		//MatchingRule
		public RuleCall getMatchingRuleMatchingRuleParserRuleCall_6_0() { return cMatchingRuleMatchingRuleParserRuleCall_6_0; }

		//"CoordinationRule  :"
		public Keyword getCoordinationRuleKeyword_7() { return cCoordinationRuleKeyword_7; }

		//coordinationRule=CoordinationRule
		public Assignment getCoordinationRuleAssignment_8() { return cCoordinationRuleAssignment_8; }

		//CoordinationRule
		public RuleCall getCoordinationRuleCoordinationRuleParserRuleCall_8_0() { return cCoordinationRuleCoordinationRuleParserRuleCall_8_0; }

		//"end rule;"
		public Keyword getEndRuleKeyword_9() { return cEndRuleKeyword_9; }
	}

	public class MatchingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHavingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cFilterEventExpressionsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFilterEventExpressionsEventExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFilterEventExpressionsAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//MatchingRule:
		//	"when" condition=STRING ("having" (filterEventExpressions+=EventExpression ";")*)?;
		public ParserRule getRule() { return rule; }

		//"when" condition=STRING ("having" (filterEventExpressions+=EventExpression ";")*)?
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }

		//("having" (filterEventExpressions+=EventExpression ";")*)?
		public Group getGroup_2() { return cGroup_2; }

		//"having"
		public Keyword getHavingKeyword_2_0() { return cHavingKeyword_2_0; }

		//(filterEventExpressions+=EventExpression ";")*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//filterEventExpressions+=EventExpression
		public Assignment getFilterEventExpressionsAssignment_2_1_0() { return cFilterEventExpressionsAssignment_2_1_0; }

		//EventExpression
		public RuleCall getFilterEventExpressionsEventExpressionParserRuleCall_2_1_0_0() { return cFilterEventExpressionsEventExpressionParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }
	}

	public class EventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDeclarationExpressionDeclarationCrossReference_2_0 = (CrossReference)cDeclarationAssignment_2.eContents().get(0);
		private final RuleCall cDeclarationExpressionDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cDeclarationExpressionDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cActualParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cActualParametersSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cActualParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cActualParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cActualParametersSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cActualParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EventExpression:
		//	name=ID "=" declaration=[ExpressionDeclaration] "(" (actualParameters+=STRING ("," actualParameters+=STRING)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "=" declaration=[ExpressionDeclaration] "(" (actualParameters+=STRING ("," actualParameters+=STRING)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//declaration=[ExpressionDeclaration]
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }

		//[ExpressionDeclaration]
		public CrossReference getDeclarationExpressionDeclarationCrossReference_2_0() { return cDeclarationExpressionDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getDeclarationExpressionDeclarationIDTerminalRuleCall_2_0_1() { return cDeclarationExpressionDeclarationIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(actualParameters+=STRING ("," actualParameters+=STRING)*)?
		public Group getGroup_4() { return cGroup_4; }

		//actualParameters+=STRING
		public Assignment getActualParametersAssignment_4_0() { return cActualParametersAssignment_4_0; }

		//STRING
		public RuleCall getActualParametersSTRINGTerminalRuleCall_4_0_0() { return cActualParametersSTRINGTerminalRuleCall_4_0_0; }

		//("," actualParameters+=STRING)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//actualParameters+=STRING
		public Assignment getActualParametersAssignment_4_1_1() { return cActualParametersAssignment_4_1_1; }

		//STRING
		public RuleCall getActualParametersSTRINGTerminalRuleCall_4_1_1_0() { return cActualParametersSTRINGTerminalRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CoordinationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CoordinationRule");
		private final Assignment cEventRelationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventRelationsEventRelationParserRuleCall_0 = (RuleCall)cEventRelationsAssignment.eContents().get(0);
		
		//CoordinationRule:
		//	eventRelations=EventRelation;
		public ParserRule getRule() { return rule; }

		//eventRelations=EventRelation
		public Assignment getEventRelationsAssignment() { return cEventRelationsAssignment; }

		//EventRelation
		public RuleCall getEventRelationsEventRelationParserRuleCall_0() { return cEventRelationsEventRelationParserRuleCall_0; }
	}

	public class EventRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeclarationRelationDeclarationCrossReference_0_0 = (CrossReference)cDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cDeclarationRelationDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cDeclarationRelationDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cActualParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cActualParametersSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cActualParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActualParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cActualParametersSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cActualParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EventRelation:
		//	declaration=[RelationDeclaration] "(" (actualParameters+=STRING ("," actualParameters+=STRING)*)? ")";
		public ParserRule getRule() { return rule; }

		//declaration=[RelationDeclaration] "(" (actualParameters+=STRING ("," actualParameters+=STRING)*)? ")"
		public Group getGroup() { return cGroup; }

		//declaration=[RelationDeclaration]
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//[RelationDeclaration]
		public CrossReference getDeclarationRelationDeclarationCrossReference_0_0() { return cDeclarationRelationDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getDeclarationRelationDeclarationIDTerminalRuleCall_0_0_1() { return cDeclarationRelationDeclarationIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(actualParameters+=STRING ("," actualParameters+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }

		//actualParameters+=STRING
		public Assignment getActualParametersAssignment_2_0() { return cActualParametersAssignment_2_0; }

		//STRING
		public RuleCall getActualParametersSTRINGTerminalRuleCall_2_0_0() { return cActualParametersSTRINGTerminalRuleCall_2_0_0; }

		//("," actualParameters+=STRING)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//actualParameters+=STRING
		public Assignment getActualParametersAssignment_2_1_1() { return cActualParametersAssignment_2_1_1; }

		//STRING
		public RuleCall getActualParametersSTRINGTerminalRuleCall_2_1_1_0() { return cActualParametersSTRINGTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ImportLibRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportLibRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportLibKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//ImportLibRule returns ImportLibStatement:
		//	"ImportLib" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"ImportLib" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"ImportLib"
		public Keyword getImportLibKeyword_0() { return cImportLibKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ImportInterfaceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportInterfaceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ImportInterfaceRule returns ImportInterfaceStatement:
		//	"ImportInterface" importURI=STRING "as" STRING;
		public ParserRule getRule() { return rule; }

		//"ImportInterface" importURI=STRING "as" STRING
		public Group getGroup() { return cGroup; }

		//"ImportInterface"
		public Keyword getImportInterfaceKeyword_0() { return cImportInterfaceKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
	}
	
	
	private BCoolSpecElements pBCoolSpec;
	private BCoolOperatorSpecElements pBCoolOperatorSpec;
	private GlobalDSEsRuleElements pGlobalDSEsRule;
	private GlobalEventExpressionRuleElements pGlobalEventExpressionRule;
	private BCoolCompositionRuleElements pBCoolCompositionRule;
	private MatchingRuleElements pMatchingRule;
	private EventExpressionElements pEventExpression;
	private CoordinationRuleElements pCoordinationRule;
	private EventRelationElements pEventRelation;
	private ImportLibRuleElements pImportLibRule;
	private ImportInterfaceRuleElements pImportInterfaceRule;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public BCOoLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.bcool.model.xtext.BCOoL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//BCoolSpec returns BCoolSpecification:
	//	name=ID? importsLib+=ImportLibRule+ importsBehavioralInterface+=ImportInterfaceRule+
	//	bcoolOperators+=BCoolOperatorSpec+;
	public BCoolSpecElements getBCoolSpecAccess() {
		return (pBCoolSpec != null) ? pBCoolSpec : (pBCoolSpec = new BCoolSpecElements());
	}
	
	public ParserRule getBCoolSpecRule() {
		return getBCoolSpecAccess().getRule();
	}

	//BCoolOperatorSpec returns BCoolOperator:
	//	"Operator" name=ID globalEventExpressions+=globalEventExpressionRule? globalDSEs+=globalDSEsRule?
	//	bcoolCompositionRules+=BCoolCompositionRule+ "end operator;";
	public BCoolOperatorSpecElements getBCoolOperatorSpecAccess() {
		return (pBCoolOperatorSpec != null) ? pBCoolOperatorSpec : (pBCoolOperatorSpec = new BCoolOperatorSpecElements());
	}
	
	public ParserRule getBCoolOperatorSpecRule() {
		return getBCoolOperatorSpecAccess().getRule();
	}

	//globalDSEsRule returns DefPropertyCS:
	//	"Event" name=ID ";";
	public GlobalDSEsRuleElements getGlobalDSEsRuleAccess() {
		return (pGlobalDSEsRule != null) ? pGlobalDSEsRule : (pGlobalDSEsRule = new GlobalDSEsRuleElements());
	}
	
	public ParserRule getGlobalDSEsRuleRule() {
		return getGlobalDSEsRuleAccess().getRule();
	}

	//globalEventExpressionRule returns EventExpression:
	//	"let" EventExpression;
	public GlobalEventExpressionRuleElements getGlobalEventExpressionRuleAccess() {
		return (pGlobalEventExpressionRule != null) ? pGlobalEventExpressionRule : (pGlobalEventExpressionRule = new GlobalEventExpressionRuleElements());
	}
	
	public ParserRule getGlobalEventExpressionRuleRule() {
		return getGlobalEventExpressionRuleAccess().getRule();
	}

	//BCoolCompositionRule:
	//	"CompositionRule" name=ID "(" (DSEs+=[DefPropertyCS|QualifiedName] ("," DSEs+=[DefPropertyCS])*)? ")" "MatchingRule :"
	//	matchingRule=MatchingRule "CoordinationRule  :" coordinationRule=CoordinationRule "end rule;";
	public BCoolCompositionRuleElements getBCoolCompositionRuleAccess() {
		return (pBCoolCompositionRule != null) ? pBCoolCompositionRule : (pBCoolCompositionRule = new BCoolCompositionRuleElements());
	}
	
	public ParserRule getBCoolCompositionRuleRule() {
		return getBCoolCompositionRuleAccess().getRule();
	}

	//MatchingRule:
	//	"when" condition=STRING ("having" (filterEventExpressions+=EventExpression ";")*)?;
	public MatchingRuleElements getMatchingRuleAccess() {
		return (pMatchingRule != null) ? pMatchingRule : (pMatchingRule = new MatchingRuleElements());
	}
	
	public ParserRule getMatchingRuleRule() {
		return getMatchingRuleAccess().getRule();
	}

	//EventExpression:
	//	name=ID "=" declaration=[ExpressionDeclaration] "(" (actualParameters+=STRING ("," actualParameters+=STRING)*)? ")";
	public EventExpressionElements getEventExpressionAccess() {
		return (pEventExpression != null) ? pEventExpression : (pEventExpression = new EventExpressionElements());
	}
	
	public ParserRule getEventExpressionRule() {
		return getEventExpressionAccess().getRule();
	}

	//CoordinationRule:
	//	eventRelations=EventRelation;
	public CoordinationRuleElements getCoordinationRuleAccess() {
		return (pCoordinationRule != null) ? pCoordinationRule : (pCoordinationRule = new CoordinationRuleElements());
	}
	
	public ParserRule getCoordinationRuleRule() {
		return getCoordinationRuleAccess().getRule();
	}

	//EventRelation:
	//	declaration=[RelationDeclaration] "(" (actualParameters+=STRING ("," actualParameters+=STRING)*)? ")";
	public EventRelationElements getEventRelationAccess() {
		return (pEventRelation != null) ? pEventRelation : (pEventRelation = new EventRelationElements());
	}
	
	public ParserRule getEventRelationRule() {
		return getEventRelationAccess().getRule();
	}

	//ImportLibRule returns ImportLibStatement:
	//	"ImportLib" importURI=STRING;
	public ImportLibRuleElements getImportLibRuleAccess() {
		return (pImportLibRule != null) ? pImportLibRule : (pImportLibRule = new ImportLibRuleElements());
	}
	
	public ParserRule getImportLibRuleRule() {
		return getImportLibRuleAccess().getRule();
	}

	//ImportInterfaceRule returns ImportInterfaceStatement:
	//	"ImportInterface" importURI=STRING "as" STRING;
	public ImportInterfaceRuleElements getImportInterfaceRuleAccess() {
		return (pImportInterfaceRule != null) ? pImportInterfaceRule : (pImportInterfaceRule = new ImportInterfaceRuleElements());
	}
	
	public ParserRule getImportInterfaceRuleRule() {
		return getImportInterfaceRuleAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
