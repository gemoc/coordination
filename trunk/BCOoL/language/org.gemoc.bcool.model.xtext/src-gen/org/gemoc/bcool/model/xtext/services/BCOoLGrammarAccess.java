/*
* generated by Xtext
*/
package org.gemoc.bcool.model.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.gemoc.gel.gexpressions.xtext.services.GExpressionsGrammarAccess;

@Singleton
public class BCOoLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BCoolSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cImportsLibAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsLibImportLibRuleParserRuleCall_1_0 = (RuleCall)cImportsLibAssignment_1.eContents().get(0);
		private final Assignment cImportsBehavioralInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsBehavioralInterfaceImportInterfaceRuleParserRuleCall_2_0 = (RuleCall)cImportsBehavioralInterfaceAssignment_2.eContents().get(0);
		private final Assignment cBcoolOperatorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBcoolOperatorsBCoolOperatorSpecParserRuleCall_3_0 = (RuleCall)cBcoolOperatorsAssignment_3.eContents().get(0);
		
		//BCoolSpec returns BCoolSpecification:
		//	name=ID? importsLib+=ImportLibRule+ importsBehavioralInterface+=ImportInterfaceRule+
		//	bcoolOperators+=BCoolOperatorSpec+;
		public ParserRule getRule() { return rule; }

		//name=ID? importsLib+=ImportLibRule+ importsBehavioralInterface+=ImportInterfaceRule+ bcoolOperators+=BCoolOperatorSpec+
		public Group getGroup() { return cGroup; }

		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//importsLib+=ImportLibRule+
		public Assignment getImportsLibAssignment_1() { return cImportsLibAssignment_1; }

		//ImportLibRule
		public RuleCall getImportsLibImportLibRuleParserRuleCall_1_0() { return cImportsLibImportLibRuleParserRuleCall_1_0; }

		//importsBehavioralInterface+=ImportInterfaceRule+
		public Assignment getImportsBehavioralInterfaceAssignment_2() { return cImportsBehavioralInterfaceAssignment_2; }

		//ImportInterfaceRule
		public RuleCall getImportsBehavioralInterfaceImportInterfaceRuleParserRuleCall_2_0() { return cImportsBehavioralInterfaceImportInterfaceRuleParserRuleCall_2_0; }

		//bcoolOperators+=BCoolOperatorSpec+
		public Assignment getBcoolOperatorsAssignment_3() { return cBcoolOperatorsAssignment_3; }

		//BCoolOperatorSpec
		public RuleCall getBcoolOperatorsBCoolOperatorSpecParserRuleCall_3_0() { return cBcoolOperatorsBCoolOperatorSpecParserRuleCall_3_0; }
	}

	public class BCoolOperatorSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolOperatorSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGlobalEventExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlobalEventExpressionsGlobalEventExpressionRuleParserRuleCall_2_0 = (RuleCall)cGlobalEventExpressionsAssignment_2.eContents().get(0);
		private final Assignment cGlobalDSEsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGlobalDSEsGlobalDSEsRuleParserRuleCall_3_0 = (RuleCall)cGlobalDSEsAssignment_3.eContents().get(0);
		private final Assignment cBcoolCompositionRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBcoolCompositionRulesBCoolCompositionRuleParserRuleCall_4_0 = (RuleCall)cBcoolCompositionRulesAssignment_4.eContents().get(0);
		
		//BCoolOperatorSpec returns BCoolOperator:
		//	"Spec" name=ID globalEventExpressions+=globalEventExpressionRule? globalDSEs+=globalDSEsRule?
		//	bcoolCompositionRules+=BCoolCompositionRule+;
		public ParserRule getRule() { return rule; }

		//"Spec" name=ID globalEventExpressions+=globalEventExpressionRule? globalDSEs+=globalDSEsRule?
		//bcoolCompositionRules+=BCoolCompositionRule+
		public Group getGroup() { return cGroup; }

		//"Spec"
		public Keyword getSpecKeyword_0() { return cSpecKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//globalEventExpressions+=globalEventExpressionRule?
		public Assignment getGlobalEventExpressionsAssignment_2() { return cGlobalEventExpressionsAssignment_2; }

		//globalEventExpressionRule
		public RuleCall getGlobalEventExpressionsGlobalEventExpressionRuleParserRuleCall_2_0() { return cGlobalEventExpressionsGlobalEventExpressionRuleParserRuleCall_2_0; }

		//globalDSEs+=globalDSEsRule?
		public Assignment getGlobalDSEsAssignment_3() { return cGlobalDSEsAssignment_3; }

		//globalDSEsRule
		public RuleCall getGlobalDSEsGlobalDSEsRuleParserRuleCall_3_0() { return cGlobalDSEsGlobalDSEsRuleParserRuleCall_3_0; }

		//bcoolCompositionRules+=BCoolCompositionRule+
		public Assignment getBcoolCompositionRulesAssignment_4() { return cBcoolCompositionRulesAssignment_4; }

		//BCoolCompositionRule
		public RuleCall getBcoolCompositionRulesBCoolCompositionRuleParserRuleCall_4_0() { return cBcoolCompositionRulesBCoolCompositionRuleParserRuleCall_4_0; }
	}

	public class GlobalDSEsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "globalDSEsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//globalDSEsRule returns ecl::ECLDefCS:
		//	"Global Event" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"Global Event" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"Global Event"
		public Keyword getGlobalEventKeyword_0() { return cGlobalEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class GlobalEventExpressionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "globalEventExpressionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEventExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//globalEventExpressionRule returns EventExpression:
		//	"let" EventExpression;
		public ParserRule getRule() { return rule; }

		//"let" EventExpression
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//EventExpression
		public RuleCall getEventExpressionParserRuleCall_1() { return cEventExpressionParserRuleCall_1; }
	}

	public class BCoolCompositionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolCompositionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBCoolOperatorArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBCoolOperatorArgsBCoolOperatorArgParserRuleCall_3_0 = (RuleCall)cBCoolOperatorArgsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBCoolOperatorArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBCoolOperatorArgsBCoolOperatorArgParserRuleCall_4_1_0 = (RuleCall)cBCoolOperatorArgsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMatchingCorrespondanceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMatchingRuleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMatchingRuleMatchingRuleParserRuleCall_7_0 = (RuleCall)cMatchingRuleAssignment_7.eContents().get(0);
		private final Assignment cCoordinationRuleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCoordinationRuleCoordinationRuleParserRuleCall_8_0 = (RuleCall)cCoordinationRuleAssignment_8.eContents().get(0);
		private final Keyword cEndOperatorKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BCoolCompositionRule:
		//	"Operator" name=ID "(" BCoolOperatorArgs+=BCoolOperatorArg ("," BCoolOperatorArgs+=BCoolOperatorArg)* ")"
		//	"MatchingCorrespondance:" matchingRule=MatchingRule coordinationRule=CoordinationRule "end operator;";
		public ParserRule getRule() { return rule; }

		//"Operator" name=ID "(" BCoolOperatorArgs+=BCoolOperatorArg ("," BCoolOperatorArgs+=BCoolOperatorArg)* ")"
		//"MatchingCorrespondance:" matchingRule=MatchingRule coordinationRule=CoordinationRule "end operator;"
		public Group getGroup() { return cGroup; }

		//"Operator"
		public Keyword getOperatorKeyword_0() { return cOperatorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//BCoolOperatorArgs+=BCoolOperatorArg
		public Assignment getBCoolOperatorArgsAssignment_3() { return cBCoolOperatorArgsAssignment_3; }

		//BCoolOperatorArg
		public RuleCall getBCoolOperatorArgsBCoolOperatorArgParserRuleCall_3_0() { return cBCoolOperatorArgsBCoolOperatorArgParserRuleCall_3_0; }

		//("," BCoolOperatorArgs+=BCoolOperatorArg)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//BCoolOperatorArgs+=BCoolOperatorArg
		public Assignment getBCoolOperatorArgsAssignment_4_1() { return cBCoolOperatorArgsAssignment_4_1; }

		//BCoolOperatorArg
		public RuleCall getBCoolOperatorArgsBCoolOperatorArgParserRuleCall_4_1_0() { return cBCoolOperatorArgsBCoolOperatorArgParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"MatchingCorrespondance:"
		public Keyword getMatchingCorrespondanceKeyword_6() { return cMatchingCorrespondanceKeyword_6; }

		//matchingRule=MatchingRule
		public Assignment getMatchingRuleAssignment_7() { return cMatchingRuleAssignment_7; }

		//MatchingRule
		public RuleCall getMatchingRuleMatchingRuleParserRuleCall_7_0() { return cMatchingRuleMatchingRuleParserRuleCall_7_0; }

		//coordinationRule=CoordinationRule
		public Assignment getCoordinationRuleAssignment_8() { return cCoordinationRuleAssignment_8; }

		//CoordinationRule
		public RuleCall getCoordinationRuleCoordinationRuleParserRuleCall_8_0() { return cCoordinationRuleCoordinationRuleParserRuleCall_8_0; }

		//"end operator;"
		public Keyword getEndOperatorKeyword_9() { return cEndOperatorKeyword_9; }
	}

	public class BCoolOperatorArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCoolOperatorArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSpaceColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInterfaceImportInterfaceStatementCrossReference_2_0 = (CrossReference)cInterfaceAssignment_2.eContents().get(0);
		private final RuleCall cInterfaceImportInterfaceStatementIDTerminalRuleCall_2_0_1 = (RuleCall)cInterfaceImportInterfaceStatementCrossReference_2_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDSEAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDSEECLDefCSCrossReference_4_0 = (CrossReference)cDSEAssignment_4.eContents().get(0);
		private final RuleCall cDSEECLDefCSIDTerminalRuleCall_4_0_1 = (RuleCall)cDSEECLDefCSCrossReference_4_0.eContents().get(1);
		
		//BCoolOperatorArg:
		//	name=ID " : " Interface=[ImportInterfaceStatement] "::" DSE=[ecl::ECLDefCS];
		public ParserRule getRule() { return rule; }

		//name=ID " : " Interface=[ImportInterfaceStatement] "::" DSE=[ecl::ECLDefCS]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//" : "
		public Keyword getSpaceColonSpaceKeyword_1() { return cSpaceColonSpaceKeyword_1; }

		//Interface=[ImportInterfaceStatement]
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }

		//[ImportInterfaceStatement]
		public CrossReference getInterfaceImportInterfaceStatementCrossReference_2_0() { return cInterfaceImportInterfaceStatementCrossReference_2_0; }

		//ID
		public RuleCall getInterfaceImportInterfaceStatementIDTerminalRuleCall_2_0_1() { return cInterfaceImportInterfaceStatementIDTerminalRuleCall_2_0_1; }

		//"::"
		public Keyword getColonColonKeyword_3() { return cColonColonKeyword_3; }

		//DSE=[ecl::ECLDefCS]
		public Assignment getDSEAssignment_4() { return cDSEAssignment_4; }

		//[ecl::ECLDefCS]
		public CrossReference getDSEECLDefCSCrossReference_4_0() { return cDSEECLDefCSCrossReference_4_0; }

		//ID
		public RuleCall getDSEECLDefCSIDTerminalRuleCall_4_0_1() { return cDSEECLDefCSIDTerminalRuleCall_4_0_1; }
	}

	public class MatchingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionGExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCoordinationRuleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLocalEventKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFilterEventExpressionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFilterEventExpressionsEventExpressionParserRuleCall_4_1_0 = (RuleCall)cFilterEventExpressionsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//MatchingRule:
		//	"when" condition=GExpression ";" "CoordinationRule:" ("Local Event" filterEventExpressions+=EventExpression ";")*;
		public ParserRule getRule() { return rule; }

		//"when" condition=GExpression ";" "CoordinationRule:" ("Local Event" filterEventExpressions+=EventExpression ";")*
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=GExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//GExpression
		public RuleCall getConditionGExpressionParserRuleCall_1_0() { return cConditionGExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//"CoordinationRule:"
		public Keyword getCoordinationRuleKeyword_3() { return cCoordinationRuleKeyword_3; }

		//("Local Event" filterEventExpressions+=EventExpression ";")*
		public Group getGroup_4() { return cGroup_4; }

		//"Local Event"
		public Keyword getLocalEventKeyword_4_0() { return cLocalEventKeyword_4_0; }

		//filterEventExpressions+=EventExpression
		public Assignment getFilterEventExpressionsAssignment_4_1() { return cFilterEventExpressionsAssignment_4_1; }

		//EventExpression
		public RuleCall getFilterEventExpressionsEventExpressionParserRuleCall_4_1_0() { return cFilterEventExpressionsEventExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}

	public class EventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDeclarationExpressionDeclarationCrossReference_2_0 = (CrossReference)cDeclarationAssignment_2.eContents().get(0);
		private final RuleCall cDeclarationExpressionDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cDeclarationExpressionDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cActualParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cActualParametersEObjectCrossReference_4_0_0 = (CrossReference)cActualParametersAssignment_4_0.eContents().get(0);
		private final RuleCall cActualParametersEObjectIDTerminalRuleCall_4_0_0_1 = (RuleCall)cActualParametersEObjectCrossReference_4_0_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cActualParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cActualParametersEObjectCrossReference_4_1_1_0 = (CrossReference)cActualParametersAssignment_4_1_1.eContents().get(0);
		private final RuleCall cActualParametersEObjectIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cActualParametersEObjectCrossReference_4_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EventExpression: //name=ID '=' declaration=[ExpressionDeclaration|ID]'(' (actualParameters+=STRING (',' actualParameters+=STRING)*)? ')'
		//	name=ID "=" declaration=[ExpressionDeclaration] "(" (actualParameters+=[ecore::EObject] (","
		//	actualParameters+=[ecore::EObject])*)? ")";
		public ParserRule getRule() { return rule; }

		////name=ID '=' declaration=[ExpressionDeclaration|ID]'(' (actualParameters+=STRING (',' actualParameters+=STRING)*)? ')'
		//name=ID "=" declaration=[ExpressionDeclaration] "(" (actualParameters+=[ecore::EObject] (","
		//actualParameters+=[ecore::EObject])*)? ")"
		public Group getGroup() { return cGroup; }

		////name=ID '=' declaration=[ExpressionDeclaration|ID]'(' (actualParameters+=STRING (',' actualParameters+=STRING)*)? ')'
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//declaration=[ExpressionDeclaration]
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }

		//[ExpressionDeclaration]
		public CrossReference getDeclarationExpressionDeclarationCrossReference_2_0() { return cDeclarationExpressionDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getDeclarationExpressionDeclarationIDTerminalRuleCall_2_0_1() { return cDeclarationExpressionDeclarationIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(actualParameters+=[ecore::EObject] ("," actualParameters+=[ecore::EObject])*)?
		public Group getGroup_4() { return cGroup_4; }

		//actualParameters+=[ecore::EObject]
		public Assignment getActualParametersAssignment_4_0() { return cActualParametersAssignment_4_0; }

		//[ecore::EObject]
		public CrossReference getActualParametersEObjectCrossReference_4_0_0() { return cActualParametersEObjectCrossReference_4_0_0; }

		//ID
		public RuleCall getActualParametersEObjectIDTerminalRuleCall_4_0_0_1() { return cActualParametersEObjectIDTerminalRuleCall_4_0_0_1; }

		//("," actualParameters+=[ecore::EObject])*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//actualParameters+=[ecore::EObject]
		public Assignment getActualParametersAssignment_4_1_1() { return cActualParametersAssignment_4_1_1; }

		//[ecore::EObject]
		public CrossReference getActualParametersEObjectCrossReference_4_1_1_0() { return cActualParametersEObjectCrossReference_4_1_1_0; }

		//ID
		public RuleCall getActualParametersEObjectIDTerminalRuleCall_4_1_1_0_1() { return cActualParametersEObjectIDTerminalRuleCall_4_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CoordinationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CoordinationRule");
		private final Assignment cEventRelationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventRelationsEventRelationParserRuleCall_0 = (RuleCall)cEventRelationsAssignment.eContents().get(0);
		
		//CoordinationRule:
		//	eventRelations=EventRelation;
		public ParserRule getRule() { return rule; }

		//eventRelations=EventRelation
		public Assignment getEventRelationsAssignment() { return cEventRelationsAssignment; }

		//EventRelation
		public RuleCall getEventRelationsEventRelationParserRuleCall_0() { return cEventRelationsEventRelationParserRuleCall_0; }
	}

	public class EventRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventRelationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDeclarationRelationDeclarationCrossReference_2_0 = (CrossReference)cDeclarationAssignment_2.eContents().get(0);
		private final RuleCall cDeclarationRelationDeclarationQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDeclarationRelationDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cActualParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cActualParametersECLDefCSCrossReference_4_0_0 = (CrossReference)cActualParametersAssignment_4_0.eContents().get(0);
		private final RuleCall cActualParametersECLDefCSIDTerminalRuleCall_4_0_0_1 = (RuleCall)cActualParametersECLDefCSCrossReference_4_0_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cActualParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cActualParametersECLDefCSCrossReference_4_1_1_0 = (CrossReference)cActualParametersAssignment_4_1_1.eContents().get(0);
		private final RuleCall cActualParametersECLDefCSIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cActualParametersECLDefCSCrossReference_4_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EventRelation:
		//	{EventRelation} "Relation"? declaration=[RelationDeclaration|QualifiedName] "(" (actualParameters+=[ecl::ECLDefCS]
		//	("," actualParameters+=[ecl::ECLDefCS])*)? ")";
		public ParserRule getRule() { return rule; }

		//{EventRelation} "Relation"? declaration=[RelationDeclaration|QualifiedName] "(" (actualParameters+=[ecl::ECLDefCS] (","
		//actualParameters+=[ecl::ECLDefCS])*)? ")"
		public Group getGroup() { return cGroup; }

		//{EventRelation}
		public Action getEventRelationAction_0() { return cEventRelationAction_0; }

		//"Relation"?
		public Keyword getRelationKeyword_1() { return cRelationKeyword_1; }

		//declaration=[RelationDeclaration|QualifiedName]
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }

		//[RelationDeclaration|QualifiedName]
		public CrossReference getDeclarationRelationDeclarationCrossReference_2_0() { return cDeclarationRelationDeclarationCrossReference_2_0; }

		//QualifiedName
		public RuleCall getDeclarationRelationDeclarationQualifiedNameParserRuleCall_2_0_1() { return cDeclarationRelationDeclarationQualifiedNameParserRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(actualParameters+=[ecl::ECLDefCS] ("," actualParameters+=[ecl::ECLDefCS])*)?
		public Group getGroup_4() { return cGroup_4; }

		//actualParameters+=[ecl::ECLDefCS]
		public Assignment getActualParametersAssignment_4_0() { return cActualParametersAssignment_4_0; }

		//[ecl::ECLDefCS]
		public CrossReference getActualParametersECLDefCSCrossReference_4_0_0() { return cActualParametersECLDefCSCrossReference_4_0_0; }

		//ID
		public RuleCall getActualParametersECLDefCSIDTerminalRuleCall_4_0_0_1() { return cActualParametersECLDefCSIDTerminalRuleCall_4_0_0_1; }

		//("," actualParameters+=[ecl::ECLDefCS])*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//actualParameters+=[ecl::ECLDefCS]
		public Assignment getActualParametersAssignment_4_1_1() { return cActualParametersAssignment_4_1_1; }

		//[ecl::ECLDefCS]
		public CrossReference getActualParametersECLDefCSCrossReference_4_1_1_0() { return cActualParametersECLDefCSCrossReference_4_1_1_0; }

		//ID
		public RuleCall getActualParametersECLDefCSIDTerminalRuleCall_4_1_1_0_1() { return cActualParametersECLDefCSIDTerminalRuleCall_4_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ImportLibRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportLibRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportLibKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//ImportLibRule returns ImportLibStatement:
		//	"ImportLib" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"ImportLib" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"ImportLib"
		public Keyword getImportLibKeyword_0() { return cImportLibKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ImportInterfaceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportInterfaceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//ImportInterfaceRule returns ImportInterfaceStatement:
		//	"ImportInterface" importURI=STRING "as" name=ID;
		public ParserRule getRule() { return rule; }

		//"ImportInterface" importURI=STRING "as" name=ID
		public Group getGroup() { return cGroup; }

		//"ImportInterface"
		public Keyword getImportInterfaceKeyword_0() { return cImportInterfaceKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	
	
	private final BCoolSpecElements pBCoolSpec;
	private final BCoolOperatorSpecElements pBCoolOperatorSpec;
	private final GlobalDSEsRuleElements pGlobalDSEsRule;
	private final GlobalEventExpressionRuleElements pGlobalEventExpressionRule;
	private final BCoolCompositionRuleElements pBCoolCompositionRule;
	private final BCoolOperatorArgElements pBCoolOperatorArg;
	private final MatchingRuleElements pMatchingRule;
	private final EventExpressionElements pEventExpression;
	private final CoordinationRuleElements pCoordinationRule;
	private final EventRelationElements pEventRelation;
	private final ImportLibRuleElements pImportLibRule;
	private final ImportInterfaceRuleElements pImportInterfaceRule;
	
	private final Grammar grammar;

	private final GExpressionsGrammarAccess gaGExpressions;

	@Inject
	public BCOoLGrammarAccess(GrammarProvider grammarProvider,
		GExpressionsGrammarAccess gaGExpressions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaGExpressions = gaGExpressions;
		this.pBCoolSpec = new BCoolSpecElements();
		this.pBCoolOperatorSpec = new BCoolOperatorSpecElements();
		this.pGlobalDSEsRule = new GlobalDSEsRuleElements();
		this.pGlobalEventExpressionRule = new GlobalEventExpressionRuleElements();
		this.pBCoolCompositionRule = new BCoolCompositionRuleElements();
		this.pBCoolOperatorArg = new BCoolOperatorArgElements();
		this.pMatchingRule = new MatchingRuleElements();
		this.pEventExpression = new EventExpressionElements();
		this.pCoordinationRule = new CoordinationRuleElements();
		this.pEventRelation = new EventRelationElements();
		this.pImportLibRule = new ImportLibRuleElements();
		this.pImportInterfaceRule = new ImportInterfaceRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.bcool.model.xtext.BCOoL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public GExpressionsGrammarAccess getGExpressionsGrammarAccess() {
		return gaGExpressions;
	}

	
	//BCoolSpec returns BCoolSpecification:
	//	name=ID? importsLib+=ImportLibRule+ importsBehavioralInterface+=ImportInterfaceRule+
	//	bcoolOperators+=BCoolOperatorSpec+;
	public BCoolSpecElements getBCoolSpecAccess() {
		return pBCoolSpec;
	}
	
	public ParserRule getBCoolSpecRule() {
		return getBCoolSpecAccess().getRule();
	}

	//BCoolOperatorSpec returns BCoolOperator:
	//	"Spec" name=ID globalEventExpressions+=globalEventExpressionRule? globalDSEs+=globalDSEsRule?
	//	bcoolCompositionRules+=BCoolCompositionRule+;
	public BCoolOperatorSpecElements getBCoolOperatorSpecAccess() {
		return pBCoolOperatorSpec;
	}
	
	public ParserRule getBCoolOperatorSpecRule() {
		return getBCoolOperatorSpecAccess().getRule();
	}

	//globalDSEsRule returns ecl::ECLDefCS:
	//	"Global Event" name=ID ";";
	public GlobalDSEsRuleElements getGlobalDSEsRuleAccess() {
		return pGlobalDSEsRule;
	}
	
	public ParserRule getGlobalDSEsRuleRule() {
		return getGlobalDSEsRuleAccess().getRule();
	}

	//globalEventExpressionRule returns EventExpression:
	//	"let" EventExpression;
	public GlobalEventExpressionRuleElements getGlobalEventExpressionRuleAccess() {
		return pGlobalEventExpressionRule;
	}
	
	public ParserRule getGlobalEventExpressionRuleRule() {
		return getGlobalEventExpressionRuleAccess().getRule();
	}

	//BCoolCompositionRule:
	//	"Operator" name=ID "(" BCoolOperatorArgs+=BCoolOperatorArg ("," BCoolOperatorArgs+=BCoolOperatorArg)* ")"
	//	"MatchingCorrespondance:" matchingRule=MatchingRule coordinationRule=CoordinationRule "end operator;";
	public BCoolCompositionRuleElements getBCoolCompositionRuleAccess() {
		return pBCoolCompositionRule;
	}
	
	public ParserRule getBCoolCompositionRuleRule() {
		return getBCoolCompositionRuleAccess().getRule();
	}

	//BCoolOperatorArg:
	//	name=ID " : " Interface=[ImportInterfaceStatement] "::" DSE=[ecl::ECLDefCS];
	public BCoolOperatorArgElements getBCoolOperatorArgAccess() {
		return pBCoolOperatorArg;
	}
	
	public ParserRule getBCoolOperatorArgRule() {
		return getBCoolOperatorArgAccess().getRule();
	}

	//MatchingRule:
	//	"when" condition=GExpression ";" "CoordinationRule:" ("Local Event" filterEventExpressions+=EventExpression ";")*;
	public MatchingRuleElements getMatchingRuleAccess() {
		return pMatchingRule;
	}
	
	public ParserRule getMatchingRuleRule() {
		return getMatchingRuleAccess().getRule();
	}

	//EventExpression: //name=ID '=' declaration=[ExpressionDeclaration|ID]'(' (actualParameters+=STRING (',' actualParameters+=STRING)*)? ')'
	//	name=ID "=" declaration=[ExpressionDeclaration] "(" (actualParameters+=[ecore::EObject] (","
	//	actualParameters+=[ecore::EObject])*)? ")";
	public EventExpressionElements getEventExpressionAccess() {
		return pEventExpression;
	}
	
	public ParserRule getEventExpressionRule() {
		return getEventExpressionAccess().getRule();
	}

	//CoordinationRule:
	//	eventRelations=EventRelation;
	public CoordinationRuleElements getCoordinationRuleAccess() {
		return pCoordinationRule;
	}
	
	public ParserRule getCoordinationRuleRule() {
		return getCoordinationRuleAccess().getRule();
	}

	//EventRelation:
	//	{EventRelation} "Relation"? declaration=[RelationDeclaration|QualifiedName] "(" (actualParameters+=[ecl::ECLDefCS]
	//	("," actualParameters+=[ecl::ECLDefCS])*)? ")";
	public EventRelationElements getEventRelationAccess() {
		return pEventRelation;
	}
	
	public ParserRule getEventRelationRule() {
		return getEventRelationAccess().getRule();
	}

	//ImportLibRule returns ImportLibStatement:
	//	"ImportLib" importURI=STRING;
	public ImportLibRuleElements getImportLibRuleAccess() {
		return pImportLibRule;
	}
	
	public ParserRule getImportLibRuleRule() {
		return getImportLibRuleAccess().getRule();
	}

	//ImportInterfaceRule returns ImportInterfaceStatement:
	//	"ImportInterface" importURI=STRING "as" name=ID;
	public ImportInterfaceRuleElements getImportInterfaceRuleAccess() {
		return pImportInterfaceRule;
	}
	
	public ParserRule getImportInterfaceRuleRule() {
		return getImportInterfaceRuleAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Main and import in order to be able to test the language as standalone
	////-----------------------------------------------------------------------------
	//GProgram:
	//	imports+=GImportStatement* (expressions+=GExpression (";"? expressions+=GExpression)*)?;
	public GExpressionsGrammarAccess.GProgramElements getGProgramAccess() {
		return gaGExpressions.getGProgramAccess();
	}
	
	public ParserRule getGProgramRule() {
		return getGProgramAccess().getRule();
	}

	//GImportStatement:
	//	"import" importURI=STRING;
	public GExpressionsGrammarAccess.GImportStatementElements getGImportStatementAccess() {
		return gaGExpressions.getGImportStatementAccess();
	}
	
	public ParserRule getGImportStatementRule() {
		return getGImportStatementAccess().getRule();
	}

	//GExpression:
	//	GOrExpression;
	public GExpressionsGrammarAccess.GExpressionElements getGExpressionAccess() {
		return gaGExpressions.getGExpressionAccess();
	}
	
	public ParserRule getGExpressionRule() {
		return getGExpressionAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Binary and unary operators, navigation, reference, ...
	////-----------------------------------------------------------------------------
	//GOrExpression returns GExpression:
	//	GXorExpression ({GOrExpression.leftOperand=current} operator=GOrOperator rightOperand=GXorExpression)*;
	public GExpressionsGrammarAccess.GOrExpressionElements getGOrExpressionAccess() {
		return gaGExpressions.getGOrExpressionAccess();
	}
	
	public ParserRule getGOrExpressionRule() {
		return getGOrExpressionAccess().getRule();
	}

	//GXorExpression returns GExpression:
	//	GAndExpression ({GXorExpression.leftOperand=current} operator=GXorOperator rightOperand=GAndExpression)*;
	public GExpressionsGrammarAccess.GXorExpressionElements getGXorExpressionAccess() {
		return gaGExpressions.getGXorExpressionAccess();
	}
	
	public ParserRule getGXorExpressionRule() {
		return getGXorExpressionAccess().getRule();
	}

	//GAndExpression returns GExpression:
	//	GEqualityExpression ({GAndExpression.leftOperand=current} operator=GAndOperator rightOperand=GEqualityExpression)*;
	public GExpressionsGrammarAccess.GAndExpressionElements getGAndExpressionAccess() {
		return gaGExpressions.getGAndExpressionAccess();
	}
	
	public ParserRule getGAndExpressionRule() {
		return getGAndExpressionAccess().getRule();
	}

	//GEqualityExpression returns GExpression:
	//	GRelationExpression ({GEqualityExpression.leftOperand=current} operator=GEqualityOperator
	//	rightOperand=GRelationExpression)*;
	public GExpressionsGrammarAccess.GEqualityExpressionElements getGEqualityExpressionAccess() {
		return gaGExpressions.getGEqualityExpressionAccess();
	}
	
	public ParserRule getGEqualityExpressionRule() {
		return getGEqualityExpressionAccess().getRule();
	}

	//GRelationExpression returns GExpression:
	//	GAdditionExpression ({GRelationExpression.leftOperand=current} operator=GRelationOperator
	//	rightOperand=GAdditionExpression)*;
	public GExpressionsGrammarAccess.GRelationExpressionElements getGRelationExpressionAccess() {
		return gaGExpressions.getGRelationExpressionAccess();
	}
	
	public ParserRule getGRelationExpressionRule() {
		return getGRelationExpressionAccess().getRule();
	}

	//GAdditionExpression returns GExpression:
	//	GMultiplicationExpression ({GAdditionExpression.leftOperand=current} operator=GAdditionOperator
	//	rightOperand=GMultiplicationExpression)*;
	public GExpressionsGrammarAccess.GAdditionExpressionElements getGAdditionExpressionAccess() {
		return gaGExpressions.getGAdditionExpressionAccess();
	}
	
	public ParserRule getGAdditionExpressionRule() {
		return getGAdditionExpressionAccess().getRule();
	}

	//GMultiplicationExpression returns GExpression:
	//	GNegationExpression ({GMultiplicationExpression.leftOperand=current} operator=GMultiplicationOperator
	//	rightOperand=GNegationExpression)*;
	public GExpressionsGrammarAccess.GMultiplicationExpressionElements getGMultiplicationExpressionAccess() {
		return gaGExpressions.getGMultiplicationExpressionAccess();
	}
	
	public ParserRule getGMultiplicationExpressionRule() {
		return getGMultiplicationExpressionAccess().getRule();
	}

	//GNegationExpression returns GExpression:
	//	GNavigationExpression | {GNegationExpression} operator=GNegationOperator operand=GNavigationExpression;
	public GExpressionsGrammarAccess.GNegationExpressionElements getGNegationExpressionAccess() {
		return gaGExpressions.getGNegationExpressionAccess();
	}
	
	public ParserRule getGNegationExpressionRule() {
		return getGNegationExpressionAccess().getRule();
	}

	//GNavigationExpression returns GExpression:
	//	GReferenceExpression ({GNavigationExpression.body=current} NavigationOperator referencedEObject=[ecore::EObject])*;
	public GExpressionsGrammarAccess.GNavigationExpressionElements getGNavigationExpressionAccess() {
		return gaGExpressions.getGNavigationExpressionAccess();
	}
	
	public ParserRule getGNavigationExpressionRule() {
		return getGNavigationExpressionAccess().getRule();
	}

	//GReferenceExpression returns GExpression:
	//	GPrimaryExpression | {GReferenceExpression} referencedEObject=[ecore::EObject];
	public GExpressionsGrammarAccess.GReferenceExpressionElements getGReferenceExpressionAccess() {
		return gaGExpressions.getGReferenceExpressionAccess();
	}
	
	public ParserRule getGReferenceExpressionRule() {
		return getGReferenceExpressionAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Primary expressions
	////-----------------------------------------------------------------------------
	//GPrimaryExpression returns GExpression:
	//	GStringExpression | GBooleanExpression | GNumericExpression | GEnumLiteralExpression | GIfExpression |
	//	GBraceExpression;
	public GExpressionsGrammarAccess.GPrimaryExpressionElements getGPrimaryExpressionAccess() {
		return gaGExpressions.getGPrimaryExpressionAccess();
	}
	
	public ParserRule getGPrimaryExpressionRule() {
		return getGPrimaryExpressionAccess().getRule();
	}

	//GStringExpression returns GExpression:
	//	{GStringExpression} value=STRING;
	public GExpressionsGrammarAccess.GStringExpressionElements getGStringExpressionAccess() {
		return gaGExpressions.getGStringExpressionAccess();
	}
	
	public ParserRule getGStringExpressionRule() {
		return getGStringExpressionAccess().getRule();
	}

	//GBooleanExpression returns GExpression:
	//	{GBooleanExpression} value=BOOLEAN;
	public GExpressionsGrammarAccess.GBooleanExpressionElements getGBooleanExpressionAccess() {
		return gaGExpressions.getGBooleanExpressionAccess();
	}
	
	public ParserRule getGBooleanExpressionRule() {
		return getGBooleanExpressionAccess().getRule();
	}

	//GNumericExpression returns GExpression:
	//	GIntegerExpression | GDoubleExpression;
	public GExpressionsGrammarAccess.GNumericExpressionElements getGNumericExpressionAccess() {
		return gaGExpressions.getGNumericExpressionAccess();
	}
	
	public ParserRule getGNumericExpressionRule() {
		return getGNumericExpressionAccess().getRule();
	}

	//GIntegerExpression returns GExpression:
	//	{GIntegerExpression} value=INT;
	public GExpressionsGrammarAccess.GIntegerExpressionElements getGIntegerExpressionAccess() {
		return gaGExpressions.getGIntegerExpressionAccess();
	}
	
	public ParserRule getGIntegerExpressionRule() {
		return getGIntegerExpressionAccess().getRule();
	}

	//GDoubleExpression returns GExpression:
	//	{GDoubleExpression} value=DOUBLE;
	public GExpressionsGrammarAccess.GDoubleExpressionElements getGDoubleExpressionAccess() {
		return gaGExpressions.getGDoubleExpressionAccess();
	}
	
	public ParserRule getGDoubleExpressionRule() {
		return getGDoubleExpressionAccess().getRule();
	}

	//GEnumLiteralExpression returns GExpression:
	//	{GEnumLiteralExpression} "#" value=[ecore::EEnumLiteral|QualifiedName];
	public GExpressionsGrammarAccess.GEnumLiteralExpressionElements getGEnumLiteralExpressionAccess() {
		return gaGExpressions.getGEnumLiteralExpressionAccess();
	}
	
	public ParserRule getGEnumLiteralExpressionRule() {
		return getGEnumLiteralExpressionAccess().getRule();
	}

	//GIfExpression returns GExpression:
	//	{GIfExpression} "if" condition=GExpression "then" thenExpression=GExpression "else" elseExpression=GExpression
	//	"endif";
	public GExpressionsGrammarAccess.GIfExpressionElements getGIfExpressionAccess() {
		return gaGExpressions.getGIfExpressionAccess();
	}
	
	public ParserRule getGIfExpressionRule() {
		return getGIfExpressionAccess().getRule();
	}

	//GBraceExpression returns GExpression:
	//	{GBraceExpression} "(" innerExpression=GExpression ")";
	public GExpressionsGrammarAccess.GBraceExpressionElements getGBraceExpressionAccess() {
		return gaGExpressions.getGBraceExpressionAccess();
	}
	
	public ParserRule getGBraceExpressionRule() {
		return getGBraceExpressionAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Operators enumerations
	////-----------------------------------------------------------------------------
	//enum GAndOperator:
	//	AND="and";
	public GExpressionsGrammarAccess.GAndOperatorElements getGAndOperatorAccess() {
		return gaGExpressions.getGAndOperatorAccess();
	}
	
	public EnumRule getGAndOperatorRule() {
		return getGAndOperatorAccess().getRule();
	}

	//enum GXorOperator:
	//	XOR="xor";
	public GExpressionsGrammarAccess.GXorOperatorElements getGXorOperatorAccess() {
		return gaGExpressions.getGXorOperatorAccess();
	}
	
	public EnumRule getGXorOperatorRule() {
		return getGXorOperatorAccess().getRule();
	}

	//enum GOrOperator:
	//	OR="or";
	public GExpressionsGrammarAccess.GOrOperatorElements getGOrOperatorAccess() {
		return gaGExpressions.getGOrOperatorAccess();
	}
	
	public EnumRule getGOrOperatorRule() {
		return getGOrOperatorAccess().getRule();
	}

	//enum GEqualityOperator:
	//	EQUAL="=" | NOTEQUAL="<>";
	public GExpressionsGrammarAccess.GEqualityOperatorElements getGEqualityOperatorAccess() {
		return gaGExpressions.getGEqualityOperatorAccess();
	}
	
	public EnumRule getGEqualityOperatorRule() {
		return getGEqualityOperatorAccess().getRule();
	}

	//enum GRelationOperator:
	//	LESS="<" | GREATER=">" | LESSEQUAL="<=" | GREATEREQUAL=">=";
	public GExpressionsGrammarAccess.GRelationOperatorElements getGRelationOperatorAccess() {
		return gaGExpressions.getGRelationOperatorAccess();
	}
	
	public EnumRule getGRelationOperatorRule() {
		return getGRelationOperatorAccess().getRule();
	}

	//enum GAdditionOperator:
	//	ADDITION="+" | SUBTRACTION="-";
	public GExpressionsGrammarAccess.GAdditionOperatorElements getGAdditionOperatorAccess() {
		return gaGExpressions.getGAdditionOperatorAccess();
	}
	
	public EnumRule getGAdditionOperatorRule() {
		return getGAdditionOperatorAccess().getRule();
	}

	//enum GMultiplicationOperator:
	//	MULTIPLICATION="*" | DIVISION="/";
	public GExpressionsGrammarAccess.GMultiplicationOperatorElements getGMultiplicationOperatorAccess() {
		return gaGExpressions.getGMultiplicationOperatorAccess();
	}
	
	public EnumRule getGMultiplicationOperatorRule() {
		return getGMultiplicationOperatorAccess().getRule();
	}

	//enum GNegationOperator:
	//	NEGATION="not" | MINUS= // TODO: fix unary negation
	//	"~";
	public GExpressionsGrammarAccess.GNegationOperatorElements getGNegationOperatorAccess() {
		return gaGExpressions.getGNegationOperatorAccess();
	}
	
	public EnumRule getGNegationOperatorRule() {
		return getGNegationOperatorAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Additional terminals
	////-----------------------------------------------------------------------------
	//NavigationOperator returns ecore::EString:
	//	"." | "->";
	public GExpressionsGrammarAccess.NavigationOperatorElements getNavigationOperatorAccess() {
		return gaGExpressions.getNavigationOperatorAccess();
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaGExpressions.getBOOLEANRule();
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	("-" | "+")? (INT "." INT | "." INT | INT ".") ("e" ("-" | "+") INT)?;
	public TerminalRule getDOUBLERule() {
		return gaGExpressions.getDOUBLERule();
	} 

	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public GExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaGExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaGExpressions.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaGExpressions.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaGExpressions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaGExpressions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaGExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaGExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaGExpressions.getANY_OTHERRule();
	} 
}
