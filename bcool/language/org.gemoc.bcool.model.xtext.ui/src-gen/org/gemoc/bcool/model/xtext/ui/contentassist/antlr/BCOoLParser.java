/*
 * generated by Xtext
 */
package org.gemoc.bcool.model.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.gemoc.bcool.model.xtext.services.BCOoLGrammarAccess;

public class BCOoLParser extends AbstractContentAssistParser {
	
	@Inject
	private BCOoLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.gemoc.bcool.model.xtext.ui.contentassist.antlr.internal.InternalBCOoLParser createParser() {
		org.gemoc.bcool.model.xtext.ui.contentassist.antlr.internal.InternalBCOoLParser result = new org.gemoc.bcool.model.xtext.ui.contentassist.antlr.internal.InternalBCOoLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGNegationExpressionAccess().getAlternatives(), "rule__GNegationExpression__Alternatives");
					put(grammarAccess.getGReferenceExpressionAccess().getAlternatives(), "rule__GReferenceExpression__Alternatives");
					put(grammarAccess.getGPrimaryExpressionAccess().getAlternatives(), "rule__GPrimaryExpression__Alternatives");
					put(grammarAccess.getGNumericExpressionAccess().getAlternatives(), "rule__GNumericExpression__Alternatives");
					put(grammarAccess.getNavigationOperatorAccess().getAlternatives(), "rule__NavigationOperator__Alternatives");
					put(grammarAccess.getGEqualityOperatorAccess().getAlternatives(), "rule__GEqualityOperator__Alternatives");
					put(grammarAccess.getGRelationOperatorAccess().getAlternatives(), "rule__GRelationOperator__Alternatives");
					put(grammarAccess.getGAdditionOperatorAccess().getAlternatives(), "rule__GAdditionOperator__Alternatives");
					put(grammarAccess.getGMultiplicationOperatorAccess().getAlternatives(), "rule__GMultiplicationOperator__Alternatives");
					put(grammarAccess.getGNegationOperatorAccess().getAlternatives(), "rule__GNegationOperator__Alternatives");
					put(grammarAccess.getBCoolSpecAccess().getGroup(), "rule__BCoolSpec__Group__0");
					put(grammarAccess.getBCoolOperatorSpecAccess().getGroup(), "rule__BCoolOperatorSpec__Group__0");
					put(grammarAccess.getBCoolOperatorSpecAccess().getGroup_0(), "rule__BCoolOperatorSpec__Group_0__0");
					put(grammarAccess.getGlobalDSEsRuleAccess().getGroup(), "rule__GlobalDSEsRule__Group__0");
					put(grammarAccess.getGlobalEventExpressionRuleAccess().getGroup(), "rule__GlobalEventExpressionRule__Group__0");
					put(grammarAccess.getBCoolCompositionRuleAccess().getGroup(), "rule__BCoolCompositionRule__Group__0");
					put(grammarAccess.getBCoolCompositionRuleAccess().getGroup_4(), "rule__BCoolCompositionRule__Group_4__0");
					put(grammarAccess.getBCoolOperatorArgAccess().getGroup(), "rule__BCoolOperatorArg__Group__0");
					put(grammarAccess.getMatchingRuleAccess().getGroup(), "rule__MatchingRule__Group__0");
					put(grammarAccess.getMatchingRuleAccess().getGroup_4(), "rule__MatchingRule__Group_4__0");
					put(grammarAccess.getEventExpressionAccess().getGroup(), "rule__EventExpression__Group__0");
					put(grammarAccess.getEventExpressionAccess().getGroup_4(), "rule__EventExpression__Group_4__0");
					put(grammarAccess.getEventExpressionAccess().getGroup_4_1(), "rule__EventExpression__Group_4_1__0");
					put(grammarAccess.getEventRelationAccess().getGroup(), "rule__EventRelation__Group__0");
					put(grammarAccess.getEventRelationAccess().getGroup_3(), "rule__EventRelation__Group_3__0");
					put(grammarAccess.getEventRelationAccess().getGroup_3_1(), "rule__EventRelation__Group_3_1__0");
					put(grammarAccess.getImportLibRuleAccess().getGroup(), "rule__ImportLibRule__Group__0");
					put(grammarAccess.getImportInterfaceRuleAccess().getGroup(), "rule__ImportInterfaceRule__Group__0");
					put(grammarAccess.getGProgramAccess().getGroup(), "rule__GProgram__Group__0");
					put(grammarAccess.getGProgramAccess().getGroup_1(), "rule__GProgram__Group_1__0");
					put(grammarAccess.getGProgramAccess().getGroup_1_1(), "rule__GProgram__Group_1_1__0");
					put(grammarAccess.getGImportStatementAccess().getGroup(), "rule__GImportStatement__Group__0");
					put(grammarAccess.getGOrExpressionAccess().getGroup(), "rule__GOrExpression__Group__0");
					put(grammarAccess.getGOrExpressionAccess().getGroup_1(), "rule__GOrExpression__Group_1__0");
					put(grammarAccess.getGXorExpressionAccess().getGroup(), "rule__GXorExpression__Group__0");
					put(grammarAccess.getGXorExpressionAccess().getGroup_1(), "rule__GXorExpression__Group_1__0");
					put(grammarAccess.getGAndExpressionAccess().getGroup(), "rule__GAndExpression__Group__0");
					put(grammarAccess.getGAndExpressionAccess().getGroup_1(), "rule__GAndExpression__Group_1__0");
					put(grammarAccess.getGEqualityExpressionAccess().getGroup(), "rule__GEqualityExpression__Group__0");
					put(grammarAccess.getGEqualityExpressionAccess().getGroup_1(), "rule__GEqualityExpression__Group_1__0");
					put(grammarAccess.getGRelationExpressionAccess().getGroup(), "rule__GRelationExpression__Group__0");
					put(grammarAccess.getGRelationExpressionAccess().getGroup_1(), "rule__GRelationExpression__Group_1__0");
					put(grammarAccess.getGAdditionExpressionAccess().getGroup(), "rule__GAdditionExpression__Group__0");
					put(grammarAccess.getGAdditionExpressionAccess().getGroup_1(), "rule__GAdditionExpression__Group_1__0");
					put(grammarAccess.getGMultiplicationExpressionAccess().getGroup(), "rule__GMultiplicationExpression__Group__0");
					put(grammarAccess.getGMultiplicationExpressionAccess().getGroup_1(), "rule__GMultiplicationExpression__Group_1__0");
					put(grammarAccess.getGNegationExpressionAccess().getGroup_1(), "rule__GNegationExpression__Group_1__0");
					put(grammarAccess.getGNavigationExpressionAccess().getGroup(), "rule__GNavigationExpression__Group__0");
					put(grammarAccess.getGNavigationExpressionAccess().getGroup_1(), "rule__GNavigationExpression__Group_1__0");
					put(grammarAccess.getGReferenceExpressionAccess().getGroup_1(), "rule__GReferenceExpression__Group_1__0");
					put(grammarAccess.getGStringExpressionAccess().getGroup(), "rule__GStringExpression__Group__0");
					put(grammarAccess.getGBooleanExpressionAccess().getGroup(), "rule__GBooleanExpression__Group__0");
					put(grammarAccess.getGIntegerExpressionAccess().getGroup(), "rule__GIntegerExpression__Group__0");
					put(grammarAccess.getGDoubleExpressionAccess().getGroup(), "rule__GDoubleExpression__Group__0");
					put(grammarAccess.getGEnumLiteralExpressionAccess().getGroup(), "rule__GEnumLiteralExpression__Group__0");
					put(grammarAccess.getGIfExpressionAccess().getGroup(), "rule__GIfExpression__Group__0");
					put(grammarAccess.getGBraceExpressionAccess().getGroup(), "rule__GBraceExpression__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getBCoolSpecAccess().getNameAssignment_0(), "rule__BCoolSpec__NameAssignment_0");
					put(grammarAccess.getBCoolSpecAccess().getImportsLibAssignment_1(), "rule__BCoolSpec__ImportsLibAssignment_1");
					put(grammarAccess.getBCoolSpecAccess().getImportsBehavioralInterfaceAssignment_2(), "rule__BCoolSpec__ImportsBehavioralInterfaceAssignment_2");
					put(grammarAccess.getBCoolSpecAccess().getBcoolOperatorsAssignment_3(), "rule__BCoolSpec__BcoolOperatorsAssignment_3");
					put(grammarAccess.getBCoolOperatorSpecAccess().getNameAssignment_0_1(), "rule__BCoolOperatorSpec__NameAssignment_0_1");
					put(grammarAccess.getBCoolOperatorSpecAccess().getGlobalEventExpressionsAssignment_1(), "rule__BCoolOperatorSpec__GlobalEventExpressionsAssignment_1");
					put(grammarAccess.getBCoolOperatorSpecAccess().getGlobalDSEsAssignment_2(), "rule__BCoolOperatorSpec__GlobalDSEsAssignment_2");
					put(grammarAccess.getBCoolOperatorSpecAccess().getBcoolCompositionRulesAssignment_3(), "rule__BCoolOperatorSpec__BcoolCompositionRulesAssignment_3");
					put(grammarAccess.getGlobalDSEsRuleAccess().getNameAssignment_1(), "rule__GlobalDSEsRule__NameAssignment_1");
					put(grammarAccess.getBCoolCompositionRuleAccess().getNameAssignment_1(), "rule__BCoolCompositionRule__NameAssignment_1");
					put(grammarAccess.getBCoolCompositionRuleAccess().getBCoolOperatorArgsAssignment_3(), "rule__BCoolCompositionRule__BCoolOperatorArgsAssignment_3");
					put(grammarAccess.getBCoolCompositionRuleAccess().getBCoolOperatorArgsAssignment_4_1(), "rule__BCoolCompositionRule__BCoolOperatorArgsAssignment_4_1");
					put(grammarAccess.getBCoolCompositionRuleAccess().getMatchingRuleAssignment_7(), "rule__BCoolCompositionRule__MatchingRuleAssignment_7");
					put(grammarAccess.getBCoolCompositionRuleAccess().getCoordinationRuleAssignment_8(), "rule__BCoolCompositionRule__CoordinationRuleAssignment_8");
					put(grammarAccess.getBCoolOperatorArgAccess().getNameAssignment_0(), "rule__BCoolOperatorArg__NameAssignment_0");
					put(grammarAccess.getBCoolOperatorArgAccess().getInterfaceAssignment_2(), "rule__BCoolOperatorArg__InterfaceAssignment_2");
					put(grammarAccess.getBCoolOperatorArgAccess().getDSEAssignment_4(), "rule__BCoolOperatorArg__DSEAssignment_4");
					put(grammarAccess.getBCoolOperatorArgAccess().getInterfaceClassAssignment_5(), "rule__BCoolOperatorArg__InterfaceClassAssignment_5");
					put(grammarAccess.getMatchingRuleAccess().getConditionAssignment_1(), "rule__MatchingRule__ConditionAssignment_1");
					put(grammarAccess.getMatchingRuleAccess().getFilterEventExpressionsAssignment_4_1(), "rule__MatchingRule__FilterEventExpressionsAssignment_4_1");
					put(grammarAccess.getEventExpressionAccess().getNameAssignment_0(), "rule__EventExpression__NameAssignment_0");
					put(grammarAccess.getEventExpressionAccess().getDeclarationAssignment_2(), "rule__EventExpression__DeclarationAssignment_2");
					put(grammarAccess.getEventExpressionAccess().getActualParametersAssignment_4_0(), "rule__EventExpression__ActualParametersAssignment_4_0");
					put(grammarAccess.getEventExpressionAccess().getActualParametersAssignment_4_1_1(), "rule__EventExpression__ActualParametersAssignment_4_1_1");
					put(grammarAccess.getCoordinationRuleAccess().getEventRelationsAssignment(), "rule__CoordinationRule__EventRelationsAssignment");
					put(grammarAccess.getEventRelationAccess().getDeclarationAssignment_1(), "rule__EventRelation__DeclarationAssignment_1");
					put(grammarAccess.getEventRelationAccess().getActualParametersAssignment_3_0(), "rule__EventRelation__ActualParametersAssignment_3_0");
					put(grammarAccess.getEventRelationAccess().getActualParametersAssignment_3_1_1(), "rule__EventRelation__ActualParametersAssignment_3_1_1");
					put(grammarAccess.getImportLibRuleAccess().getImportURIAssignment_1(), "rule__ImportLibRule__ImportURIAssignment_1");
					put(grammarAccess.getImportInterfaceRuleAccess().getImportURIAssignment_1(), "rule__ImportInterfaceRule__ImportURIAssignment_1");
					put(grammarAccess.getImportInterfaceRuleAccess().getNameAssignment_3(), "rule__ImportInterfaceRule__NameAssignment_3");
					put(grammarAccess.getGProgramAccess().getImportsAssignment_0(), "rule__GProgram__ImportsAssignment_0");
					put(grammarAccess.getGProgramAccess().getExpressionsAssignment_1_0(), "rule__GProgram__ExpressionsAssignment_1_0");
					put(grammarAccess.getGProgramAccess().getExpressionsAssignment_1_1_1(), "rule__GProgram__ExpressionsAssignment_1_1_1");
					put(grammarAccess.getGImportStatementAccess().getImportURIAssignment_1(), "rule__GImportStatement__ImportURIAssignment_1");
					put(grammarAccess.getGOrExpressionAccess().getOperatorAssignment_1_1(), "rule__GOrExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGOrExpressionAccess().getRightOperandAssignment_1_2(), "rule__GOrExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGXorExpressionAccess().getOperatorAssignment_1_1(), "rule__GXorExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGXorExpressionAccess().getRightOperandAssignment_1_2(), "rule__GXorExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGAndExpressionAccess().getOperatorAssignment_1_1(), "rule__GAndExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGAndExpressionAccess().getRightOperandAssignment_1_2(), "rule__GAndExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGEqualityExpressionAccess().getOperatorAssignment_1_1(), "rule__GEqualityExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGEqualityExpressionAccess().getRightOperandAssignment_1_2(), "rule__GEqualityExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGRelationExpressionAccess().getOperatorAssignment_1_1(), "rule__GRelationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGRelationExpressionAccess().getRightOperandAssignment_1_2(), "rule__GRelationExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGAdditionExpressionAccess().getOperatorAssignment_1_1(), "rule__GAdditionExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGAdditionExpressionAccess().getRightOperandAssignment_1_2(), "rule__GAdditionExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGMultiplicationExpressionAccess().getOperatorAssignment_1_1(), "rule__GMultiplicationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGMultiplicationExpressionAccess().getRightOperandAssignment_1_2(), "rule__GMultiplicationExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getGNegationExpressionAccess().getOperatorAssignment_1_1(), "rule__GNegationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getGNegationExpressionAccess().getOperandAssignment_1_2(), "rule__GNegationExpression__OperandAssignment_1_2");
					put(grammarAccess.getGNavigationExpressionAccess().getReferencedEObjectAssignment_1_2(), "rule__GNavigationExpression__ReferencedEObjectAssignment_1_2");
					put(grammarAccess.getGReferenceExpressionAccess().getReferencedEObjectAssignment_1_1(), "rule__GReferenceExpression__ReferencedEObjectAssignment_1_1");
					put(grammarAccess.getGStringExpressionAccess().getValueAssignment_1(), "rule__GStringExpression__ValueAssignment_1");
					put(grammarAccess.getGBooleanExpressionAccess().getValueAssignment_1(), "rule__GBooleanExpression__ValueAssignment_1");
					put(grammarAccess.getGIntegerExpressionAccess().getValueAssignment_1(), "rule__GIntegerExpression__ValueAssignment_1");
					put(grammarAccess.getGDoubleExpressionAccess().getValueAssignment_1(), "rule__GDoubleExpression__ValueAssignment_1");
					put(grammarAccess.getGEnumLiteralExpressionAccess().getValueAssignment_2(), "rule__GEnumLiteralExpression__ValueAssignment_2");
					put(grammarAccess.getGIfExpressionAccess().getConditionAssignment_2(), "rule__GIfExpression__ConditionAssignment_2");
					put(grammarAccess.getGIfExpressionAccess().getThenExpressionAssignment_4(), "rule__GIfExpression__ThenExpressionAssignment_4");
					put(grammarAccess.getGIfExpressionAccess().getElseExpressionAssignment_6(), "rule__GIfExpression__ElseExpressionAssignment_6");
					put(grammarAccess.getGBraceExpressionAccess().getInnerExpressionAssignment_2(), "rule__GBraceExpression__InnerExpressionAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.gemoc.bcool.model.xtext.ui.contentassist.antlr.internal.InternalBCOoLParser typedParser = (org.gemoc.bcool.model.xtext.ui.contentassist.antlr.internal.InternalBCOoLParser) parser;
			typedParser.entryRuleBCoolSpec();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BCOoLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BCOoLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
