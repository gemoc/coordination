/*******************************************************************************
 * Copyright (c) 2015, 2017  I3S Laboratory  and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     I3S Laboratory - initial API and implementation
 *******************************************************************************/
/**
 */
package org.eclipse.gemoc.bcool.model.bcool.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.gemoc.bcool.model.bcool.util.BcoolAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BcoolItemProviderAdapterFactory extends BcoolAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BcoolItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.BCoolOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCoolOperatorItemProvider bCoolOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.BCoolOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCoolOperatorAdapter() {
		if (bCoolOperatorItemProvider == null) {
			bCoolOperatorItemProvider = new BCoolOperatorItemProvider(this);
		}

		return bCoolOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.BCoolCompositionRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCoolCompositionRuleItemProvider bCoolCompositionRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.BCoolCompositionRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCoolCompositionRuleAdapter() {
		if (bCoolCompositionRuleItemProvider == null) {
			bCoolCompositionRuleItemProvider = new BCoolCompositionRuleItemProvider(this);
		}

		return bCoolCompositionRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.BCoolSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCoolSpecificationItemProvider bCoolSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.BCoolSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCoolSpecificationAdapter() {
		if (bCoolSpecificationItemProvider == null) {
			bCoolSpecificationItemProvider = new BCoolSpecificationItemProvider(this);
		}

		return bCoolSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.ImportLibStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportLibStatementItemProvider importLibStatementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.ImportLibStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportLibStatementAdapter() {
		if (importLibStatementItemProvider == null) {
			importLibStatementItemProvider = new ImportLibStatementItemProvider(this);
		}

		return importLibStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.MatchingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchingRuleItemProvider matchingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.MatchingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchingRuleAdapter() {
		if (matchingRuleItemProvider == null) {
			matchingRuleItemProvider = new MatchingRuleItemProvider(this);
		}

		return matchingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.CoordinationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoordinationRuleItemProvider coordinationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.CoordinationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoordinationRuleAdapter() {
		if (coordinationRuleItemProvider == null) {
			coordinationRuleItemProvider = new CoordinationRuleItemProvider(this);
		}

		return coordinationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.EventExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventExpressionItemProvider eventExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.EventExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventExpressionAdapter() {
		if (eventExpressionItemProvider == null) {
			eventExpressionItemProvider = new EventExpressionItemProvider(this);
		}

		return eventExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.ExpressionDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionDefinitionItemProvider expressionDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.ExpressionDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionDefinitionAdapter() {
		if (expressionDefinitionItemProvider == null) {
			expressionDefinitionItemProvider = new ExpressionDefinitionItemProvider(this);
		}

		return expressionDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.EventRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventRelationItemProvider eventRelationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.EventRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventRelationAdapter() {
		if (eventRelationItemProvider == null) {
			eventRelationItemProvider = new EventRelationItemProvider(this);
		}

		return eventRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.RelationDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationDefinitionItemProvider relationDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.RelationDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationDefinitionAdapter() {
		if (relationDefinitionItemProvider == null) {
			relationDefinitionItemProvider = new RelationDefinitionItemProvider(this);
		}

		return relationDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.BCoolLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCoolLibraryItemProvider bCoolLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.BCoolLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCoolLibraryAdapter() {
		if (bCoolLibraryItemProvider == null) {
			bCoolLibraryItemProvider = new BCoolLibraryItemProvider(this);
		}

		return bCoolLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.ImportInterfaceStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportInterfaceStatementItemProvider importInterfaceStatementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.ImportInterfaceStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportInterfaceStatementAdapter() {
		if (importInterfaceStatementItemProvider == null) {
			importInterfaceStatementItemProvider = new ImportInterfaceStatementItemProvider(this);
		}

		return importInterfaceStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.ExpressionDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionDeclarationItemProvider expressionDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.ExpressionDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionDeclarationAdapter() {
		if (expressionDeclarationItemProvider == null) {
			expressionDeclarationItemProvider = new ExpressionDeclarationItemProvider(this);
		}

		return expressionDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.RelationDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationDeclarationItemProvider relationDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.RelationDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationDeclarationAdapter() {
		if (relationDeclarationItemProvider == null) {
			relationDeclarationItemProvider = new RelationDeclarationItemProvider(this);
		}

		return relationDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.bcool.model.bcool.BCoolOperatorArg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BCoolOperatorArgItemProvider bCoolOperatorArgItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.bcool.model.bcool.BCoolOperatorArg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBCoolOperatorArgAdapter() {
		if (bCoolOperatorArgItemProvider == null) {
			bCoolOperatorArgItemProvider = new BCoolOperatorArgItemProvider(this);
		}

		return bCoolOperatorArgItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (bCoolOperatorItemProvider != null) bCoolOperatorItemProvider.dispose();
		if (bCoolCompositionRuleItemProvider != null) bCoolCompositionRuleItemProvider.dispose();
		if (bCoolSpecificationItemProvider != null) bCoolSpecificationItemProvider.dispose();
		if (importLibStatementItemProvider != null) importLibStatementItemProvider.dispose();
		if (matchingRuleItemProvider != null) matchingRuleItemProvider.dispose();
		if (coordinationRuleItemProvider != null) coordinationRuleItemProvider.dispose();
		if (eventExpressionItemProvider != null) eventExpressionItemProvider.dispose();
		if (expressionDefinitionItemProvider != null) expressionDefinitionItemProvider.dispose();
		if (eventRelationItemProvider != null) eventRelationItemProvider.dispose();
		if (relationDefinitionItemProvider != null) relationDefinitionItemProvider.dispose();
		if (bCoolLibraryItemProvider != null) bCoolLibraryItemProvider.dispose();
		if (importInterfaceStatementItemProvider != null) importInterfaceStatementItemProvider.dispose();
		if (expressionDeclarationItemProvider != null) expressionDeclarationItemProvider.dispose();
		if (relationDeclarationItemProvider != null) relationDeclarationItemProvider.dispose();
		if (bCoolOperatorArgItemProvider != null) bCoolOperatorArgItemProvider.dispose();
	}

}
