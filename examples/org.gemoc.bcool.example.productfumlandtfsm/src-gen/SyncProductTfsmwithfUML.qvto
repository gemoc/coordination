// This is the result of the compilation of a BCool spec
import fr.inria.aoste.timesquare.ecl.EclQVToHelper;

	
modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
//modeltype pivot uses 'http://www.eclipse.org/ocl/3.1.0/Pivot';

	modeltype inMM1 uses 'http://www.gemoc.org/sample/tfsm';
	modeltype inMM2 uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype ocl uses 'http://www.eclipse.org/ocl/3.1.0/CompleteOCLCST';

modeltype QVT uses 'http://www.eclipse.org/QVT/1.0.0/Operational';//http://www.eclipse.org/m2m/qvt/oml/1.0.0/Stdlib';//http://www.eclipse.org/qvt/1.0/ImperativeOCL'; 
modeltype TimeModel uses 'http://fr.inria.aoste.timemodel';

	

transformation doSyncProductTfsmwithfUML_To_CCSL(
inM2 : inMM1,
inM1 : inMM2,
 out TimeModel);



property inM1MoCCPath : String = getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(1, getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1)+'_MoCC.extendedCCSL';
property inM1Clocks	:	Sequence(TimeModel::Clock) = Sequence{};
query retrieveinM1MoCCClocks() {
	inM1Clocks += getLibObjects(inM1MoCCPath)[TimeModel::Clock];
	
	return;
}
property inM2MoCCPath : String = getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(1, getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1)+'_MoCC.extendedCCSL';
property inM2Clocks	:	Sequence(TimeModel::Clock) = Sequence{};
query retrieveinM2MoCCClocks() {
	inM2Clocks += getLibObjects(inM2MoCCPath)[TimeModel::Clock];
	
	return;
}


property theCCSLSpec			:TimeModel::CCSLModel::ClockConstraintSystem = null;
property theMainBlock			:TimeModel::CCSLModel::Block				 = null;

property Kernel_Integer 	: TimeModel::BasicType::Type		= null;
property Kernel_Clock_Type 	: TimeModel::BasicType::Type		= null;

property seqOfRelationDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration)    = Sequence{};
property seqOfAbstractEntity :		Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)    = Sequence{};
property seqOfExpressionDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration)    = Sequence{};




		property MM1_seqOfticksFSMClockContext :	Sequence(inMM1::FSMClock) = Sequence{};
		property MM1_seqOfticksFSMClockReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::FSMClock::getticksMSEofMM1() {
			MM1_seqOfticksFSMClockContext += self.oclAsType(inMM1::FSMClock);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfticksFSMClockReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOffireTransitionContext :	Sequence(inMM1::Transition) = Sequence{};
		property MM1_seqOffireTransitionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::Transition::getfireMSEofMM1() {
			MM1_seqOffireTransitionContext += self.oclAsType(inMM1::Transition);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOffireTransitionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfevaluateEvaluateGuardContext :	Sequence(inMM1::EvaluateGuard) = Sequence{};
		property MM1_seqOfevaluateEvaluateGuardReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::EvaluateGuard::getevaluateMSEofMM1() {
			MM1_seqOfevaluateEvaluateGuardContext += self.oclAsType(inMM1::EvaluateGuard);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfevaluateEvaluateGuardReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfoccursFSMEventContext :	Sequence(inMM1::FSMEvent) = Sequence{};
		property MM1_seqOfoccursFSMEventReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::FSMEvent::getoccursMSEofMM1() {
			MM1_seqOfoccursFSMEventContext += self.oclAsType(inMM1::FSMEvent);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfoccursFSMEventReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfenteringStateContext :	Sequence(inMM1::State) = Sequence{};
		property MM1_seqOfenteringStateReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::State::getenteringMSEofMM1() {
			MM1_seqOfenteringStateContext += self.oclAsType(inMM1::State);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfenteringStateReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfleavingStateContext :	Sequence(inMM1::State) = Sequence{};
		property MM1_seqOfleavingStateReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::State::getleavingMSEofMM1() {
			MM1_seqOfleavingStateContext += self.oclAsType(inMM1::State);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfleavingStateReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfevaluatedTrueEvaluateGuardContext :	Sequence(inMM1::EvaluateGuard) = Sequence{};
		property MM1_seqOfevaluatedTrueEvaluateGuardReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::EvaluateGuard::getevaluatedTrueMSEofMM1() {
			MM1_seqOfevaluatedTrueEvaluateGuardContext += self.oclAsType(inMM1::EvaluateGuard);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfevaluatedTrueEvaluateGuardReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfevaluatedFalseEvaluateGuardContext :	Sequence(inMM1::EvaluateGuard) = Sequence{};
		property MM1_seqOfevaluatedFalseEvaluateGuardReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::EvaluateGuard::getevaluatedFalseMSEofMM1() {
			MM1_seqOfevaluatedFalseEvaluateGuardContext += self.oclAsType(inMM1::EvaluateGuard);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfevaluatedFalseEvaluateGuardReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfstartTFSMContext :	Sequence(inMM1::TFSM) = Sequence{};
		property MM1_seqOfstartTFSMReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::TFSM::getstartMSEofMM1() {
			MM1_seqOfstartTFSMContext += self.oclAsType(inMM1::TFSM);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfstartTFSMReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM1_seqOfstallTFSMContext :	Sequence(inMM1::TFSM) = Sequence{};
		property MM1_seqOfstallTFSMReferedElement :	Sequence(EObject) = Sequence{};

			query inMM1::TFSM::getstallMSEofMM1() {
			MM1_seqOfstallTFSMContext += self.oclAsType(inMM1::TFSM);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM1_seqOfstallTFSMReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOfdataReadInputPinContext :	Sequence(inMM2::InputPin) = Sequence{};
		property MM2_seqOfdataReadInputPinReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::InputPin::getdataReadMSEofMM2() {
			MM2_seqOfdataReadInputPinContext += self.oclAsType(inMM2::InputPin);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOfdataReadInputPinReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOfdataWriteOutputPinContext :	Sequence(inMM2::OutputPin) = Sequence{};
		property MM2_seqOfdataWriteOutputPinReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::OutputPin::getdataWriteMSEofMM2() {
			MM2_seqOfdataWriteOutputPinContext += self.oclAsType(inMM2::OutputPin);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOfdataWriteOutputPinReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOfstartItControlNodeContext :	Sequence(inMM2::ControlNode) = Sequence{};
		property MM2_seqOfstartItControlNodeReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::ControlNode::getstartItMSEofMM2() {
			MM2_seqOfstartItControlNodeContext += self.oclAsType(inMM2::ControlNode);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOfstartItControlNodeReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOffinishItControlNodeContext :	Sequence(inMM2::ControlNode) = Sequence{};
		property MM2_seqOffinishItControlNodeReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::ControlNode::getfinishItMSEofMM2() {
			MM2_seqOffinishItControlNodeContext += self.oclAsType(inMM2::ControlNode);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOffinishItControlNodeReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOftemporalEventControlNodeContext :	Sequence(inMM2::ControlNode) = Sequence{};
		property MM2_seqOftemporalEventControlNodeReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::ControlNode::gettemporalEventMSEofMM2() {
			MM2_seqOftemporalEventControlNodeContext += self.oclAsType(inMM2::ControlNode);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOftemporalEventControlNodeReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOfstartActivityActivityContext :	Sequence(inMM2::Activity) = Sequence{};
		property MM2_seqOfstartActivityActivityReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::Activity::getstartActivityMSEofMM2() {
			MM2_seqOfstartActivityActivityContext += self.oclAsType(inMM2::Activity);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOfstartActivityActivityReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOffinishActivityActivityContext :	Sequence(inMM2::Activity) = Sequence{};
		property MM2_seqOffinishActivityActivityReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::Activity::getfinishActivityMSEofMM2() {
			MM2_seqOffinishActivityActivityContext += self.oclAsType(inMM2::Activity);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOffinishActivityActivityReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOfstartActionActionContext :	Sequence(inMM2::Action) = Sequence{};
		property MM2_seqOfstartActionActionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::Action::getstartActionMSEofMM2() {
			MM2_seqOfstartActionActionContext += self.oclAsType(inMM2::Action);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOfstartActionActionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOffinishActionActionContext :	Sequence(inMM2::Action) = Sequence{};
		property MM2_seqOffinishActionActionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::Action::getfinishActionMSEofMM2() {
			MM2_seqOffinishActionActionContext += self.oclAsType(inMM2::Action);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOffinishActionActionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



		property MM2_seqOfcallMessageEventContext :	Sequence(inMM2::MessageEvent) = Sequence{};
		property MM2_seqOfcallMessageEventReferedElement :	Sequence(EObject) = Sequence{};

			query inMM2::MessageEvent::getcallMSEofMM2() {
			MM2_seqOfcallMessageEventContext += self.oclAsType(inMM2::MessageEvent);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM2_seqOfcallMessageEventReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



query identifyUserRelations() {
	var kernelTypes :  	Sequence(TimeModel::BasicType::Type) := Sequence{};

	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/TFSMMoC.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/TFSMMoC.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/TFSMMoC.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/TFSMMoC.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/lib4RT.ccslLib")[TimeModel::BasicType::Type];


	seqOfRelationDeclaration		+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/library/bcoollib.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/library/bcoollib.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/library/bcoollib.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/library/bcoollib.ccslLib")[TimeModel::BasicType::Type];

	Kernel_Integer 					:= kernelTypes[name='int']->asSequence()->first();
	Kernel_Clock_Type				:= kernelTypes[name='clock']->asSequence()->first();	

	return;
}


//usefull function :)
	mapping Real::Real2Integer(n: String) :TimeModel::BasicType::IntegerElement {
		name:= n;
		type:= Kernel_Integer;
		value := self.round();

		end{
			theMainBlock.elements += result;
		}
	}

//really usefull function
	mapping NewClock (n: String) :TimeModel::Clock{
		name:= n;
		type:= Kernel_Clock_Type;
		end {
			theMainBlock.elements += result;
		}
	}


main() {
	identifyUserRelations();
		retrieveinM1MoCCClocks();
		retrieveinM2MoCCClocks();


			inM1.objectsOfType(inMM1::FSMClock).getticksMSEofMM1();
			inM1.objectsOfType(inMM1::Transition).getfireMSEofMM1();
			inM1.objectsOfType(inMM1::EvaluateGuard).getevaluateMSEofMM1();
			inM1.objectsOfType(inMM1::FSMEvent).getoccursMSEofMM1();
			inM1.objectsOfType(inMM1::State).getenteringMSEofMM1();
			inM1.objectsOfType(inMM1::State).getleavingMSEofMM1();
			inM1.objectsOfType(inMM1::EvaluateGuard).getevaluatedTrueMSEofMM1();
			inM1.objectsOfType(inMM1::EvaluateGuard).getevaluatedFalseMSEofMM1();
			inM1.objectsOfType(inMM1::TFSM).getstartMSEofMM1();
			inM1.objectsOfType(inMM1::TFSM).getstallMSEofMM1();
			inM2.objectsOfType(inMM2::InputPin).getdataReadMSEofMM2();
			inM2.objectsOfType(inMM2::OutputPin).getdataWriteMSEofMM2();
			inM2.objectsOfType(inMM2::ControlNode).getstartItMSEofMM2();
			inM2.objectsOfType(inMM2::ControlNode).getfinishItMSEofMM2();
			inM2.objectsOfType(inMM2::ControlNode).gettemporalEventMSEofMM2();
			inM2.objectsOfType(inMM2::Activity).getstartActivityMSEofMM2();
			inM2.objectsOfType(inMM2::Activity).getfinishActivityMSEofMM2();
			inM2.objectsOfType(inMM2::Action).getstartActionMSEofMM2();
			inM2.objectsOfType(inMM2::Action).getfinishActionMSEofMM2();
			inM2.objectsOfType(inMM2::MessageEvent).getcallMSEofMM2();
	//just to create the ccsl model
	map SyncProductTfsmwithfUML2CCSL();


		MM2_seqOfstartActionActionContext-> forEach (startAction){ 
		MM1_seqOfoccursFSMEventContext-> forEach (occurs){ 

		if (occurs.name = startAction.name) then {
		
			
			map MatchingandCoordinationSharedEvents (

						occurs.name+'_occurs'
			
					,

						startAction.name+'_startAction'
			
			
			);
		} endif;

		}
		}

}








mapping MatchingandCoordinationSharedEvents (
				occurs:String
					,
				startAction:String
	) :TimeModel::CCSLModel::ClockExpressionAndRelation::Relation {
			
			name := 'MatchingandCoordinationSharedEvents';
					name := name + occurs.toString();
					name := name + startAction.toString();
	
			type := seqOfRelationDeclaration->select(rd | rd.name = "RendezVous")->first();
			
					bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
						bindable := map DSEtoClock(occurs).bindable;
						_abstract := seqOfRelationDeclaration->select(rd | rd.name = "RendezVous")->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					};
					bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
						bindable := map DSEtoClock(startAction).bindable;
						_abstract := seqOfRelationDeclaration->select(rd | rd.name = "RendezVous")->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					};

end{
			theMainBlock.relations += result;
		}	
			
}

mapping DSEtoClock (iname: String) : TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		if inM1Clocks[name = iname]->notEmpty() then 
			bindable := inM1Clocks[name = iname]->first().oclAsType(TimeModel::Clock)
		endif;
		if inM2Clocks[name = iname]->notEmpty() then 
			bindable := inM2Clocks[name = iname]->first().oclAsType(TimeModel::Clock)
		endif;
	if theMainBlock.expressions[name = iname]->notEmpty() then
		bindable := theMainBlock.expressions[name = iname]->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::Expression)
	endif;

	if theMainBlock.elements[name = iname]->notEmpty() then
		bindable := theMainBlock.elements[name = iname]->first().oclAsType(TimeModel::Clock)
	endif;


}







	mapping SyncProductTfsmwithfUML2CCSL() : TimeModel::CCSLModel::ClockConstraintSystem {
	    theCCSLSpec := result;
	    name := 'SyncProductTfsmwithfUMLCoordination';
	    theMainBlock :=object TimeModel::CCSLModel::Block{
	    	name := "mainBlock";
	    };
	    subBlock += theMainBlock;
	    result.superBlock := theMainBlock;


		imports+= object TimeModel::ImportStatement{
				importURI := 'platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/library/bcoollib.ccslLib';
				alias := 'lib_2';	
				}; 

	imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'model_1_1';	
		}; 
	imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'model_1_2';	
		}; 
	imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/TFSMMoC.ccslLib';
			alias := 'model_1_3';	
		}; 
	imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'model_2_1';	
		}; 
	imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'model_2_2';	
		}; 
	imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/resource/org.gemoc.bcool.example.productfumlandtfsm/interfaces/lib4RT.ccslLib';
			alias := 'model_2_3';	
		}; 

	imports+= object TimeModel::ImportStatement{
			importURI := inM1MoCCPath;
			alias := 'inM1';	
		}; 
	imports+= object TimeModel::ImportStatement{
			importURI := inM2MoCCPath;
			alias := 'inM2';	
		}; 

}



